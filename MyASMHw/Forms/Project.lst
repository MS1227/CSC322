Microsoft (R) Macro Assembler Version 12.00.30501.0	    11/18/16 10:26:05
Forms.asm						     Page 1 - 1


				;;;Forms.asm
				;;;A program for reading in up to 10 names, phone numbers and email addresses
				;;;Due 11/11/2016
				;;;CSC322
				;;;Fall 2016


				INCLUDE IRVINE32.INC
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 00000072		textColor           DWORD     green + (lightGray * 16)						;;Text color - green on light gray background
 00000004 00000027		blankColor          DWORD     lightGray + (green * 16)						;;Inversion of the above to make blank spaces visable.
																							;;//Following strings are stored in memory for use in the program:
 00000008 46 6F 72 6D 73	headerStr           BYTE      "Forms Program - By: Matt Schnider",0			;;Header string that will be printed at the top of the window.
	   20 50 72 6F 67
	   72 61 6D 20 2D
	   20 42 79 3A 20
	   4D 61 74 74 20
	   53 63 68 6E 69
	   64 65 72 00
 0000002A 46 69 72 73 74	firstStr            BYTE      "First Name:",0								;;First name title string
	   20 4E 61 6D 65
	   3A 00
 00000036 4C 61 73 74 20	lastStr             BYTE      "Last Name:", 0								;;Last name title string
	   4E 61 6D 65 3A
	   00
 00000041 50 68 6F 6E 65	phoneStr            BYTE      "Phone:", 0									;;Phone number title string
	   3A 00
 00000048 45 6D 61 69 6C	emailStr            BYTE      "Email:",0									;;Email address title string
	   3A 00
 0000004F 52 65 63 6F 72	recordStr           BYTE      "Record Count",0								;;Record count string
	   64 20 43 6F 75
	   6E 74 00
 0000005C 3C 45 6E 74 65	pressEnt	        BYTE      "<Enter> by itself to quit.",0				;;String to alert user to press enter to quit
	   72 3E 20 62 79
	   20 69 74 73 65
	   6C 66 20 74 6F
	   20 71 75 69 74
	   2E 00
 00000077 20 00			Space				BYTE      " ",0											;;Blank space.
 00000079 46 69 72 73 74	firstP				BYTE      "First Name",0									;;First name string used to title print out column
	   20 4E 61 6D 65
	   00
 00000084 4C 61 73 74 20	lastP				BYTE      "Last Name",0									;;Last name string used to title print out column
	   4E 61 6D 65 00
 0000008E 50 68 6F 6E 65	phoneP				BYTE      "Phone Number",0									;;Phone number string used to title print out column
	   20 4E 75 6D 62
	   65 72 00
 0000009B 45 6D 61 69 6C	emailP				BYTE      "Email Address",0								;;Email address string used to title print out column
	   20 41 64 64 72
	   65 73 73 00


 000000A9 01			PrintCount          BYTE      1											;;Integer value initialized to 1 for use in marking line numbers when printing out records
 000000AA  00000002 [		counter             BYTE      2 DUP(0)											;;Integer value initialized to 0 for use in counting number of inserted records
	    00
	   ]
 000000AC  0000000F [		fifteenSpaces       BYTE      15 DUP(' '), 0								;;15 blank spaces - used to print blanks
	    20
	   ] 00
 000000BC  0000000E [		fourteenSpaces      BYTE      14 DUP(' '), 0								;;14 blank spaces
	    20
	   ] 00
 000000CB  00000019 [		twentyFiveSpaces    BYTE      25 DUP(' '), 0								;;25 blank spaces
	    20
	   ] 00
 000000E5 52 65 63 6F 72	recordCounter	    BYTE      "Record Count:",0							;;Record count string
	   64 20 43 6F 75
	   6E 74 3A 00
 000000F3 05			printLine           BYTE      5												;;Integer used to hold the y coordinate of the line being printed on

 000000F4  0000000A [		theRecords	    BYTE      10 DUP(2 DUP(15 DUP(' '),0), 14 DUP(' '),0, 25 DUP(' '), 0)		;;Formatted space in RAM to hold the data for 10 records
	    00000002 [
	     0000000F [
	      20
	     ] 00
	    ]
	    0000000E [
	     20
	    ] 00
	    00000019 [
	     20
	    ] 00
	   ]
 000003CE  0000000F [		firstBuf	        BYTE      15 DUP(' ')									;;Buffer of size 15 to limit the amount of chars read in from the user input
	    20
	   ]
 000003DD  0000000F [		lastBuf			    BYTE      15 DUP(' ')										;;Same as above
	    20
	   ]
 000003EC  0000000E [		phoneBuf	        BYTE      14 DUP(' ')									;;Same as above	- size different
	    20
	   ]
 000003FA  00000019 [		emailBuf	        BYTE      25 DUP(' ') 									;;Same as above
	    20
	   ]


 00000000			.code
 00000000			main PROC
 00000000  A1 00000000 R	     mov eax, textColor														;;Moves the value of textColor into the eax register
 00000005  E8 00000000 E	     call SetTextColor														;;Calls the proc to set the window colors to the values spec'd in the eax
 0000000A  E8 00000000 E	     call clrscr															;;Clear Screen wipes the screen and shows new colors

				    
 0000000F  B9 0000000A		     mov ecx, 10															;;10 is moved into ecx for use in creating a loop to collect the 10 records
				     
 00000014  BF 000000F4 R	     mov edi, OFFSET theRecords												;;edi set to point to the beginnin of the records array

 00000019			RDATA:																		;;Label for looping purposes
 00000019  51			     push ecx																;;ecx val is pushed onto the stack

 0000001A  E8 000001FE		     call drawFields														;;drawFields is called to print the form to the window
 0000001F  B2 25			mov dl, (80 - SIZEOF fifteenSpaces)/2 +5								;;X coordinate of first name blank
 00000021  B6 04			mov dh, 4																;;Y coordinate of first name blank
 00000023  E8 00000000 E		call gotoxy																;;Moves cursor to above x,y coords

 00000028  8B D7			mov edx, edi															;;moves the val of edi into edx
 0000002A  B9 0000000F			mov ecx, LENGTHOF firstBuf												;;moves the length of the firstBuf into the ecx to limit chars read
 0000002F  E8 00000000 E		call ReadString															;;ReadString called to prompt user for data entry
 00000034  83 C7 10			add edi, SIZEOF firstBuf+1												;;Advances the edi to point to the next field of the array in memory
 00000037  83 F8 00			cmp eax,0																;;Compare statement to determine if the user input was null
 0000003A  74 51			je FinishedDataEntry													;;If above statement was true, jump to FinishedDataEntry, else keep going
					
 0000003C  B2 25			mov dl,(80 - SIZEOF fifteenSpaces + 1)/2 + 5							;;Same as above
 0000003E  B6 06			mov dh, 6
 00000040  E8 00000000 E		call gotoxy
 00000045  8B D7			mov edx, edi
 00000047  B9 0000000F			mov ecx, LENGTHOF lastBuf
 0000004C  E8 00000000 E		call ReadString
 00000051  83 C7 10			add edi, SIZEOF lastBuf+1

 00000054  B2 25			mov dl,((80 - SIZEOF fifteenSpaces)/2) + 5
 00000056  B6 08			mov dh, 8
 00000058  E8 00000000 E		call gotoxy
 0000005D  8B D7			mov edx, edi
 0000005F  B9 0000000E			mov ecx,LENGTHOF phoneBuf
 00000064  E8 00000000 E		call ReadString
 00000069  83 C7 0F			add edi, SIZEOF phoneBuf+1	

 0000006C  B2 25			mov dl,((80 - SIZEOF TwentyFiveSpaces)/2)+10
 0000006E  B6 0A			mov dh, 10
 00000070  E8 00000000 E		call gotoxy
 00000075  8B D7			mov edx, edi
 00000077  B9 00000019			mov ecx, LENGTHOF emailBuf
 0000007C  E8 00000000 E		call ReadString
 00000081  83 C7 1A			add edi, SIZEOF emailBuf+1

 00000084  FE 05 000000AA R		inc counter																;;Record counter is incremented

					
				 
 0000008A  59				pop ecx																	;;ecx is popped off the stack so the following loop command can operate
 0000008B  E2 8C		loop RDATA

 0000008D			FinishedDataEntry:															;;label destination for the above jump instruction
 0000008D  A1 00000000 R	     mov eax, textColor														;;moves the text color into the eax
 00000092  E8 00000000 E	     call setTextColor														;;proc call to set the text color to the one in the eax
 00000097  E8 00000000 E	     call clrscr															;;screen is cleared in prep for printing out records
 0000009C  E8 00000117		     call drawPrint															;;drawPrint proc is called to set up the column headers, etc. for printing
 000000A1  0F B6 0D			movzx ecx,counter														;;moves the amount of records stored in counter, padded with leading zeros into the ecx
	   000000AA R
 000000A8  BE 000000F4 R		mov esi, OFFSET theRecords												;;to set up a loop for printing. The esi is set to the address of theRecords array.

 000000AD			PrintData:																	;;Label used to print the records out with a loop
					 
 000000AD  E8 00000061		     call doubleDigitPrint
 000000B2  0F B6 05		     movzx eax, space														;;this line and the following 2 linesprint 2 spaces
	   00000077 R
 000000B9  E8 00000000 E	     call writeChar			
 000000BE  E8 000000CB		     call printFirst														;;Proc call to print first name

 000000C3  B2 12		     mov dl, 3 + SIZEOF firstBuf											;;x coordinate of first name is moved into the dl 
 000000C5  8A 35 000000F3 R	     mov dh, printLine														;;y coordinate is set to the current printLine value
 000000CB  E8 00000000 E	     call gotoxy															;;moves cursor to above x,y coordinate
 000000D0  E8 000000CE		     call printLast															;;Proc call to print last name

 000000D5  B2 21		     mov dl, 3 + SIZEOF firstBuf + SIZEOF lastBuf							;;Same as above
 000000D7  8A 35 000000F3 R	     mov dh, printLine
 000000DD  E8 00000000 E	     call gotoxy
 000000E2  E8 00000092		     call printPhone							
					
 000000E7  B2 2F		     mov dl, 3 + SIZEOF firstBuf + SIZEOF lastBuf + SIZEOF phoneBuf		
 000000E9  8A 35 000000F3 R	     mov dh, printLine
 000000EF  E8 00000000 E	     call gotoxy
 000000F4  E8 0000006B		     call printEmail
					
 000000F9  FE 05 000000A9 R	     inc printCount															;;printCount is incremented for the printing of the next record if applicable
 000000FF  E8 00000000 E	     call crlf																;;Cursor is moved to a new line

 00000104  FE 05 000000F3 R	     inc printLine															;;printline is incremented to properly print the next record
																							
 0000010A  E2 A1		loop PrintData																;;Loops back to printData if ecx is not equal to 0
				exit									
 0000010C  6A 00	   *	    push   +000000000h
 0000010E  E8 00000000 E   *	    call   ExitProcess

 00000113			main ENDP	
 00000113			doubleDigitPrint PROC                                                                     ;;procedure to print out a double digit number
 00000113  80 3D 000000A9 R	cmp printCount,10                                                                         ;;compare and conditional jump if printCount is equal to 10
	   0A
 0000011A  74 0C		je TEN
 0000011C  B8 00000000		mov eax,0                                                                                 ;;else print 0 and then the integer number of the record
 00000121  E8 00000000 E	call WriteDec
 00000126  EB 16		jmp NOTTEN
 00000128			TEN:
 00000128  B8 00000001		mov eax,1
 0000012D  E8 00000000 E	call WriteDec
 00000132  B8 00000000		mov eax,0
 00000137  E8 00000000 E	call WriteDec
 0000013C  EB 0C		jmp DONE
 0000013E			NOTTEN:
 0000013E  0F B6 05		movzx eax, printCount
	   000000A9 R
 00000145  E8 00000000 E	call WriteDec

 0000014A			DONE:
 0000014A  C3			RET
 0000014B			doubleDigitPrint ENDP
 0000014B			doubleDigitInt PROC                                                                       ;;Proc for printing double digit numbers for the record count.
 0000014B  50			push eax

 0000014C  B8 00000000		mov eax,0
 00000151  E8 00000000 E	call WriteDec
 00000156  0F B6 05		movzx eax, counter
	   000000AA R
 0000015D  E8 00000000 E	call WriteDec
 00000162  58			pop eax

 00000163  C3			RET
 00000164			doubleDigitInt ENDP																		
 00000164			printEmail PROC																;;Procedure for printing out a stored email address referenced by the esi
 00000164  8B D6		     mov edx,esi															;;the address in the esi is moved to the edx
 00000166  E8 00000000 E		call WriteString	          ;;email print								;;WriteString prints out the string located in the edx
 0000016B  BA 00000077 R	     mov edx, OFFSET Space													;;Space printed
 00000170  E8 00000000 E	     call WriteString
 00000175  83 C6 1A			add esi, SIZEOF emailBuf+1												;;esi is updated to point to the next item in theRecords array
 00000178  C3			RET																			;;Return to calling proc
 00000179			PrintEmail ENDP
 00000179			printPhone PROC																;;Same as above proc
 00000179  8B D6		     mov edx, esi
 0000017B  E8 00000000 E	     call WriteString														;;phone number print
 00000180  BA 00000077 R	     mov edx, OFFSET Space
 00000185  E8 00000000 E	     call WriteString
 0000018A  83 C6 0F			add esi, SIZEOF phoneBuf+1

 0000018D  C3			RET
 0000018E			printPhone ENDP
 0000018E			printFirst PROC
 0000018E  8B D6		     mov edx, esi															;;First name print	
 00000190  E8 00000000 E		call WriteString    
 00000195  BA 00000077 R	     mov edx, OFFSET Space
 0000019A  E8 00000000 E	     call WriteString
 0000019F  83 C6 10			add esi, SIZEOF firstBuf+1
 000001A2  C3			RET
 000001A3			printFirst ENDP

 000001A3			printLast PROC
 000001A3  8B D6		     mov edx,esi
 000001A5  E8 00000000 E		call WriteString														;;Last name Print
 000001AA  BA 00000077 R	     mov edx, OFFSET Space
 000001AF  E8 00000000 E	     call WriteString
 000001B4  83 C6 10			add esi, SIZEOF lastBuf+1
 000001B7  C3			RET
 000001B8			printLast ENDP

 000001B8			drawPrint PROC																;;Proc to print out the formatted print out of the data in the array
 000001B8  B2 17		     mov dl, (80 - SIZEOF headerStr)/2										;;x and y coords are set up and the cursor is moved to the coordinate.
 000001BA  B6 01		     mov dh, 1										
 000001BC  E8 00000000 E	     call gotoxy

 000001C1  BA 00000008 R	     mov edx, OFFSET headerStr												;;address of headerStr is moved into the edx and printed out by WriteString
 000001C6  E8 00000000 E	     call WriteString														;;at the above coords

 000001CB  B2 03		     mov dl, 3																;;Above process is repeated below print the column headers 
 000001CD  B6 04		     mov dh,4
 000001CF  E8 00000000 E	     call gotoxy
				     
 000001D4  BA 00000079 R		mov edx, OFFSET firstP
 000001D9  E8 00000000 E		call WriteString
					
 000001DE  B2 12			mov dl, 3 + SIZEOF firstBuf
 000001E0  B6 04			mov dh, 4
 000001E2  E8 00000000 E		call gotoxy
					
 000001E7  BA 00000084 R		mov edx, OFFSET lastP
 000001EC  E8 00000000 E		call WriteString

 000001F1  B2 21			mov dl, (3 + SIZEOF firstBuf + SIZEOF lastBuf)
 000001F3  B6 04			mov dh, 4
 000001F5  E8 00000000 E		call gotoxy
 000001FA  BA 0000008E R		mov edx, OFFSET phoneP
 000001FF  E8 00000000 E		call WriteString

 00000204  B2 2F			mov dl, (3+ SIZEOF firstBuf + SIZEOF lastBuf + SIZEOF phoneBuf)
 00000206  B6 04			mov dh, 4
 00000208  E8 00000000 E		call gotoxy
 0000020D  BA 0000009B R		mov edx, OFFSET emailP
 00000212  E8 00000000 E		call WriteString

 00000217  E8 00000000 E	     call crlf
				     
 0000021C  C3			  RET
 0000021D			drawPrint ENDP

 0000021D			drawFields PROC															;;Proc to set up the window with text boxes and box titles for the collection of data
																						;;from the user.
 0000021D  A1 00000000 R	     mov eax, textColor													;;textColor is set in prep for print out the title
 00000222  E8 00000000 E	     call setTextColor

 00000227  B2 17		     mov dl, (80 - SIZEOF headerStr)/2									;;cursor is moved to the xy coords of appropriate for the header string
 00000229  B6 01		     mov dh, 1
 0000022B  E8 00000000 E	     call gotoxy
					
 00000230  BA 00000008 R	     mov edx, OFFSET headerStr											;;Header is printed out
 00000235  E8 00000000 E	     call WriteString
 0000023A  B2 1A		     mov dl, (80 - SIZEOF firstStr - SIZEOF fifteenSpaces)/2			;;x-y coords for the first name title
 0000023C  B6 04		     mov dh,4
 0000023E  E8 00000000 E	     call gotoxy

 00000243  BA 0000002A R	     mov edx, OFFSET firstStr
 00000248  E8 00000000 E	     call WriteString													;;Print first name title.

 0000024D  A1 00000004 R	     mov eax, blankColor												;;Blank color is set for the creation of pseudo text box.
 00000252  E8 00000000 E	     call SetTextColor

 00000257  BA 000000AC R	     mov edx, OFFSET fifteenSpaces
 0000025C  E8 00000000 E	     call WriteString													;;Pseudo text box printed out.

 00000261  B2 1B		     mov dl, (80 - SIZEOF lastStr - SIZEOF fifteenSpaces+1)/2			;;Same as above, but with different title
 00000263  B6 06		     mov dh, 6
 00000265  E8 00000000 E	     call gotoxy

 0000026A  A1 00000000 R	     mov eax, textColor
 0000026F  E8 00000000 E	     call setTextColor

 00000274  BA 00000036 R	     mov edx, OFFSET lastStr					
 00000279  E8 00000000 E	     call WriteString

 0000027E  A1 00000004 R	     mov eax, blankColor
 00000283  E8 00000000 E	     call setTextColor

 00000288  BA 000000AC R	     mov edx, OFFSET fifteenSpaces
 0000028D  E8 00000000 E	     call WriteString

 00000292  B2 1F		     mov dl, ((80 - SIZEOF phoneStr - SIZEOF fifteenSpaces)/2) + 3
 00000294  B6 08		     mov dh, 8
 00000296  E8 00000000 E	     call gotoxy

 0000029B  A1 00000000 R	     mov eax, textColor
 000002A0  E8 00000000 E	     call setTextColor

 000002A5  BA 00000041 R	     mov edx, OFFSET phoneStr
 000002AA  E8 00000000 E	     call WriteString						

 000002AF  A1 00000004 R	      mov eax, blankColor
 000002B4  E8 00000000 E	     call setTextColor

 000002B9  BA 000000BC R	     mov edx, OFFSET fourteenSpaces
 000002BE  E8 00000000 E	     call WriteString


 000002C3  B2 1F		     mov dl, ((80 - SIZEOF emailStr - SIZEOF TwentyFiveSpaces)/2) + 8
 000002C5  B6 0A		     mov dh, 10
 000002C7  E8 00000000 E	     call gotoxy

 000002CC  A1 00000000 R	     mov eax, textColor
 000002D1  E8 00000000 E	     call setTextColor

 000002D6  BA 00000048 R	     mov edx, OFFSET emailStr
 000002DB  E8 00000000 E	     call WriteString						

 000002E0  A1 00000004 R	      mov eax, blankColor
 000002E5  E8 00000000 E	     call setTextColor

 000002EA  BA 000000CB R	     mov edx, OFFSET TwentyFiveSpaces
 000002EF  E8 00000000 E	     call WriteString
				     
 000002F4  83 F9 0A		     cmp ecx,10																		;;The value in the ecx is compared to 10
 000002F7  7D 13		     jge FIRSTENTRY																	;;If the value in the ecx is greater than or equal to 10, jump to FIRSTENTRY label
				     
 000002F9  B2 1F		     mov dl, ((80 - SIZEOF emailStr - SIZEOF TwentyFiveSpaces)/2) + 8				;;This code is reached after one record is read in, it simply prompts the user
 000002FB  B6 0D		     mov dh, 13											;;to press enter to quit.
 000002FD  E8 00000000 E	     call gotoxy
 00000302  BA 0000005C R	     mov edx, OFFSET pressEnt
 00000307  E8 00000000 E	     call WriteString

 0000030C			FIRSTENTRY:
 0000030C  B2 40		     mov dl, (80 - 16)																;; X-coordinate of the record counter.
 0000030E  B6 18		     mov dh, 24																		;; Y-coordinate of the record counter.
 00000310  E8 00000000 E	     call gotoxy																	;; mov cursor to above coordinates.

 00000315  A1 00000000 R	     mov eax, textColor																;;textColor is set
 0000031A  E8 00000000 E	     call setTextColor

 0000031F  BA 000000E5 R	     mov edx, OFFSET recordCounter													;;record counter is printed out
 00000324  E8 00000000 E	     call WriteString

 00000329  A1 00000004 R	     mov eax, blankColor
 0000032E  E8 00000000 E	     call setTextColor

 00000333  E8 FFFFFE13		     call DoubleDigitInt

				 
				     
 00000338  C3			  RET
 00000339			drawFields ENDP
				END main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    11/18/16 10:26:05
Forms.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000413 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000339 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
doubleDigitInt . . . . . . . . .	P Near	 0000014B _TEXT	Length= 00000019 Public STDCALL
doubleDigitPrint . . . . . . . .	P Near	 00000113 _TEXT	Length= 00000038 Public STDCALL
  TEN  . . . . . . . . . . . . .	L Near	 00000128 _TEXT	
  NOTTEN . . . . . . . . . . . .	L Near	 0000013E _TEXT	
  DONE . . . . . . . . . . . . .	L Near	 0000014A _TEXT	
drawFields . . . . . . . . . . .	P Near	 0000021D _TEXT	Length= 0000011C Public STDCALL
  FIRSTENTRY . . . . . . . . . .	L Near	 0000030C _TEXT	
drawPrint  . . . . . . . . . . .	P Near	 000001B8 _TEXT	Length= 00000065 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000113 Public STDCALL
  RDATA  . . . . . . . . . . . .	L Near	 00000019 _TEXT	
  FinishedDataEntry  . . . . . .	L Near	 0000008D _TEXT	
  PrintData  . . . . . . . . . .	L Near	 000000AD _TEXT	
printEmail . . . . . . . . . . .	P Near	 00000164 _TEXT	Length= 00000015 Public STDCALL
printFirst . . . . . . . . . . .	P Near	 0000018E _TEXT	Length= 00000015 Public STDCALL
printLast  . . . . . . . . . . .	P Near	 000001A3 _TEXT	Length= 00000015 Public STDCALL
printPhone . . . . . . . . . . .	P Near	 00000179 _TEXT	Length= 00000015 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
PrintCount . . . . . . . . . . .	Byte	 000000A9 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
Space  . . . . . . . . . . . . .	Byte	 00000077 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blankColor . . . . . . . . . . .	DWord	 00000004 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
counter  . . . . . . . . . . . .	Byte	 000000AA _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
emailBuf . . . . . . . . . . . .	Byte	 000003FA _DATA	
emailP . . . . . . . . . . . . .	Byte	 0000009B _DATA	
emailStr . . . . . . . . . . . .	Byte	 00000048 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fifteenSpaces  . . . . . . . . .	Byte	 000000AC _DATA	
firstBuf . . . . . . . . . . . .	Byte	 000003CE _DATA	
firstP . . . . . . . . . . . . .	Byte	 00000079 _DATA	
firstStr . . . . . . . . . . . .	Byte	 0000002A _DATA	
fourteenSpaces . . . . . . . . .	Byte	 000000BC _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
headerStr  . . . . . . . . . . .	Byte	 00000008 _DATA	
lastBuf  . . . . . . . . . . . .	Byte	 000003DD _DATA	
lastP  . . . . . . . . . . . . .	Byte	 00000084 _DATA	
lastStr  . . . . . . . . . . . .	Byte	 00000036 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
phoneBuf . . . . . . . . . . . .	Byte	 000003EC _DATA	
phoneP . . . . . . . . . . . . .	Byte	 0000008E _DATA	
phoneStr . . . . . . . . . . . .	Byte	 00000041 _DATA	
pressEnt . . . . . . . . . . . .	Byte	 0000005C _DATA	
printLine  . . . . . . . . . . .	Byte	 000000F3 _DATA	
recordCounter  . . . . . . . . .	Byte	 000000E5 _DATA	
recordStr  . . . . . . . . . . .	Byte	 0000004F _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
textColor  . . . . . . . . . . .	DWord	 00000000 _DATA	
theRecords . . . . . . . . . . .	Byte	 000000F4 _DATA	
twentyFiveSpaces . . . . . . . .	Byte	 000000CB _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
